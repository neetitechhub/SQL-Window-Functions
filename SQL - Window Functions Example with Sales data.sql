/**
USE SALESDATA
CREATE TABLE SALES (
SALE_ID INT PRIMARY KEY,
ORDER_ID INT,
PRODUCT_ID INT, 
SALE_DATE DATE,
QUANTITY INT,
PRICE DECIMAL,
FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID),
FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID),
)

CREATE TABLE ORDERS (
ORDER_ID INT PRIMARY KEY,
ORDER_DATE DATE,
CUSTOMER_ID INT,
REGION_ID INT,
FOREIGN KEY (REGION_ID) REFERENCES REGIONS(REGION_ID)
)

CREATE TABLE PRODUCTS (
PRODUCT_ID INT PRIMARY KEY,
PRODUCT_NAME VARCHAR(100),
CATEGORY VARCHAR(100),
PRICE DECIMAL,
)
CREATE TABLE REGIONS (
REGION_ID INT PRIMARY KEY,
REGION_NAME VARCHAR(100)
)
----------------

INSERT INTO SALES (SALE_ID,	ORDER_ID,	PRODUCT_ID,	SALE_DATE,	QUANTITY,	PRICE) VALUES 
(1,	1001,	2001,	'2023-01-01',	2,	50.00),
(2,	1002,	2002,	'2023-01-02',	1,	30.00),
(3,	1001,	2001,	'2023-01-03',	1,	50.00),
(4,	1003,	2003,	'2023-01-04',	3,	20.00),
(5,	1004,	2002,	'2023-01-05',	1,	30.00)

INSERT INTO ORDERS (ORDER_ID,ORDER_DATE,CUSTOMER_ID,REGION_ID) VALUES
(1001,	'2023-01-01',	3001,	4001),
(1002,	'2023-01-02',	3002,	4002),
(1003,	'2023-01-03',	3003,	4003),
(1004,	'2023-01-04',	3004,	4004)


INSERT INTO PRODUCTS
(PRODUCT_ID, PRODUCT_NAME,	CATEGORY,	PRICE) VALUES
(2001,	'WIDGET',	'GADGETS',	50.00),
(2002,	'GIZMO',	'GADGETS',	30.00),
(2003,	'DOODAD',	'WIDGETS',	20.00)

INSERT INTO REGIONS (REGION_ID,REGION_NAME) VALUES
(4001,'NORTH'),
(4002,'SOUTH'),
(4003,'EAST'),
(4004,'WEST')
**/

--. RUNNING TOTAL OF SALES (CALCULATE THE RUNNING TOTAL OF SALES FOR EACH DAY)

 SELECT 
    SALE_DATE, 
    SUM(QUANTITY * PRICE) OVER (ORDER BY SALE_DATE) AS RUNNING_TOTAL
FROM 
    SALES
ORDER BY 
    SALE_DATE;

--2. RANKING SALES BY DATE (RANK SALES WITHIN EACH DAY)

SELECT 
    SALE_ID, 
    SALE_DATE, 
    CUSTOMER_ID, 
    PRODUCT_ID, 
    QUANTITY, 
    PRICE, 
    RANK() OVER (PARTITION BY SALE_DATE ORDER BY QUANTITY * PRICE DESC) AS RANK
FROM 
    SALES S INNER JOIN ORDERS O ON O.ORDER_ID=S.ORDER_ID 
ORDER BY 
    SALE_DATE, 
    RANK;

--3. MOVING AVERAGE OF SALES OVER 3 DAYS (CALCULATE A 3-DAY MOVING AVERAGE OF SALES)
 
SELECT 
    SALE_DATE, 
    AVG(QUANTITY * PRICE) OVER (
        ORDER BY SALE_DATE 
        ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
    ) AS MOVING_AVG
FROM 
    SALES
ORDER BY 
    SALE_DATE;

--4. PERCENT RANK OF SALES (FIND THE PERCENT RANK OF EACH SALE WITHIN THE ENTIRE DATASET)

SELECT 
    SALE_ID, 
    SALE_DATE, 
    CUSTOMER_ID, 
    PRODUCT_ID, 
    QUANTITY, 
    PRICE, 
    PERCENT_RANK() OVER (ORDER BY QUANTITY * PRICE) AS PERCENT_RANK
FROM 
    SALES S INNER JOIN ORDERS O ON O.ORDER_ID=S.ORDER_ID
ORDER BY 
    PERCENT_RANK;

--5. CUMULATIVE DISTRIBUTION OF SALES (CALCULATE THE CUMULATIVE DISTRIBUTION OF SALES)

SELECT 
    SALE_ID, 
    SALE_DATE, 
    CUSTOMER_ID, 
    PRODUCT_ID, 
    QUANTITY, 
    PRICE, 
    CUME_DIST() OVER (ORDER BY QUANTITY * PRICE) AS CUME_DIST
FROM 
    SALES S INNER JOIN ORDERS O ON O.ORDER_ID=S.ORDER_ID
ORDER BY 
    CUME_DIST;

--6. LAGGING SALES DATA (RETRIEVE THE PREVIOUS DAY'S SALES VALUE)

SELECT 
    SALE_DATE, 
    QUANTITY * PRICE AS SALES_VALUE, 
    LAG(QUANTITY * PRICE) OVER (ORDER BY SALE_DATE) AS PREVIOUS_DAY_SALES
FROM 
    SALES
ORDER BY 
    SALE_DATE;

--7. LEADING SALES DATA (RETRIEVE THE NEXT DAY'S SALES VALUE)
 
SELECT 
    SALE_DATE, 
    QUANTITY * PRICE AS SALES_VALUE, 
    LEAD(QUANTITY * PRICE) OVER (ORDER BY SALE_DATE) AS NEXT_DAY_SALES
FROM 
    SALES
ORDER BY 
    SALE_DATE;

--8. FIRST SALE DATE FOR EACH CUSTOMER (FIND THE FIRST SALE DATE FOR EACH CUSTOMER)

SELECT 
    CUSTOMER_ID, 
    SALE_DATE, 
    FIRST_VALUE(SALE_DATE) OVER (PARTITION BY CUSTOMER_ID ORDER BY SALE_DATE) AS FIRST_SALE_DATE
FROM 
    SALES S INNER JOIN ORDERS O ON O.ORDER_ID=S.ORDER_ID
ORDER BY 
    CUSTOMER_ID, 
    SALE_DATE;

--9. LAST SALE DATE FOR EACH CUSTOMER (FIND THE LAST SALE DATE FOR EACH CUSTOMER)

SELECT 
    CUSTOMER_ID, 
    SALE_DATE, 
    LAST_VALUE(SALE_DATE) OVER (PARTITION BY CUSTOMER_ID ORDER BY SALE_DATE ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS LAST_SALE_DATE
FROM 
    SALES S INNER JOIN ORDERS O ON O.ORDER_ID=S.ORDER_ID
ORDER BY 
    CUSTOMER_ID, 
    SALE_DATE;

--10. ROW NUMBER FOR EACH SALE (ASSIGN A UNIQUE ROW NUMBER TO EACH SALE WITHIN EACH DAY)
SELECT 
    SALE_ID, 
    SALE_DATE, 
    CUSTOMER_ID, 
    PRODUCT_ID, 
    QUANTITY, 
    PRICE, 
    ROW_NUMBER() OVER (PARTITION BY SALE_DATE ORDER BY SALE_ID) AS ROW_NUM
FROM 
    SALES S INNER JOIN ORDERS O ON O.ORDER_ID=S.ORDER_ID
ORDER BY 
    SALE_DATE, 
    ROW_NUM;

--11 WRITE A QUERY TO FIND THE TOP 3 PRODUCTS BY TOTAL SALES AMOUNT USING RANK().

SELECT *
FROM (
    SELECT 
        PRODUCT_ID, 
        SUM(QUANTITY * PRICE) AS TOTAL_SALES,
        RANK() OVER (ORDER BY SUM(QUANTITY * PRICE) DESC) AS SALES_RANK
    FROM 
        SALES
    GROUP BY 
        PRODUCT_ID
) AS RANKED_SALES
WHERE SALES_RANK <= 3;

--12 WRITE A QUERY TO FIND PRODUCTS THAT HAVE THE SAME SALES RANK USING DENSE_RANK()

SELECT 
    PRODUCT_ID, 
    TOTAL_SALES,
    SALES_DENSE_RANK
FROM (
    SELECT 
        PRODUCT_ID, 
        SUM(QUANTITY * PRICE) AS TOTAL_SALES,
        DENSE_RANK() OVER (ORDER BY SUM(QUANTITY * PRICE) DESC) AS SALES_DENSE_RANK
    FROM 
        SALES
    GROUP BY 
        PRODUCT_ID
) AS RANKED_SALES
WHERE SALES_DENSE_RANK IN (
    SELECT SALES_DENSE_RANK
    FROM (
        SELECT 
            DENSE_RANK() OVER (ORDER BY SUM(QUANTITY * PRICE) DESC) AS SALES_DENSE_RANK,
            COUNT(*) AS COUNT
        FROM 
            SALES
        GROUP BY 
            PRODUCT_ID
    ) AS SUBQUERY
    WHERE COUNT > 1
);

--13 CAN YOU USE RANK(), DENSE_RANK(), AND ROW_NUMBER() IN THE SAME QUERY?

SELECT 
    SALE_ID, 
    PRODUCT_ID, 
    QUANTITY, 
    PRICE, 
    RANK() OVER (ORDER BY QUANTITY * PRICE DESC) AS SALES_RANK,
    DENSE_RANK() OVER (ORDER BY QUANTITY * PRICE DESC) AS SALES_DENSE_RANK,
    ROW_NUMBER() OVER (ORDER BY QUANTITY * PRICE DESC) AS SALES_ROW_NUM
FROM 
    SALES;

--14 WRITE A QUERY TO RANK SALES WITHIN EACH REGION BY TOTAL AMOUNT.
SELECT 
    R.REGION_NAME, 
    S.SALE_ID, 
    SUM(S.QUANTITY * S.PRICE) AS TOTAL_AMOUNT,
    RANK() OVER (PARTITION BY R.REGION_NAME ORDER BY SUM(S.QUANTITY * S.PRICE) DESC) AS REGION_RANK
FROM 
    SALES S
JOIN 
    ORDERS O ON S.ORDER_ID = O.ORDER_ID
JOIN 
    REGIONS R ON O.REGION_ID = R.REGION_ID
GROUP BY 
    R.REGION_NAME, S.SALE_ID;
